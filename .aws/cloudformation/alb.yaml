AWSTemplateFormatVersion: '2010-09-09'
Description: 'Book Management System - ALB Infrastructure'

Parameters:
  ProjectName:
    Type: String
    Default: book-management
    Description: Name of the project

  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - staging
      - development
    Description: Environment type (production, staging, development)

  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the ALB will be deployed

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The first public subnet ID for the ALB

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The second public subnet ID for the ALB

  CertificateArn:
    Type: String
    Default: ''
    Description: ARN of the SSL certificate to use for HTTPS. If omitted, only HTTP will be used.

  HealthCheckPath:
    Type: String
    Default: /health
    Description: Path to use for health checks

  BackendPort:
    Type: Number
    Default: 80
    Description: The port on which the backend service listens

  FrontendPort:
    Type: Number
    Default: 8080
    Description: The port on which the frontend service listens

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]
  NoCertificate: !Equals [!Ref CertificateArn, '']

Resources:
  # ALB用セキュリティグループ
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ProjectName}-${Environment} ALB Security Group
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from anywhere
        - !If
          - HasCertificate
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
            Description: Allow HTTPS from anywhere
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb-sg

  # ECSサービス用セキュリティグループ
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ProjectName}-${Environment} ECS Service Security Group
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref BackendPort
          ToPort: !Ref BackendPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow traffic from ALB to backend
        - IpProtocol: tcp
          FromPort: !Ref FrontendPort
          ToPort: !Ref FrontendPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow traffic from ALB to frontend
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-sg

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: 'true'
        - Key: access_logs.s3.enabled
          Value: 'false'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb

  # HTTPリスナー (証明書がない場合)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: NoCertificate
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # HTTP → HTTPS リダイレクトリスナー (証明書がある場合)
  HTTPRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # HTTPSリスナー（証明書がある場合）
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

  # バックエンドAPIのリスナールール
  APIListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
      ListenerArn: !If [HasCertificate, !Ref HTTPSListener, !Ref HTTPListener]
      Priority: 10

  # バックエンドサービス用ターゲットグループ
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-be-tg
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Port: !Ref BackendPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPCId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-be-tg

  # フロントエンドサービス用ターゲットグループ
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-fe-tg
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health.txt
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Port: !Ref FrontendPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPCId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-fe-tg

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${ProjectName}-${Environment}-alb-dns

  LoadBalancerURL:
    Description: URL of the load balancer
    Value:
      !If
        - HasCertificate
        - !Sub 'https://${ApplicationLoadBalancer.DNSName}'
        - !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub ${ProjectName}-${Environment}-alb-url

  LoadBalancerArn:
    Description: ARN of the load balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${ProjectName}-${Environment}-alb-arn

  BackendTargetGroupArn:
    Description: ARN of the backend target group
    Value: !Ref BackendTargetGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-be-tg-arn

  FrontendTargetGroupArn:
    Description: ARN of the frontend target group
    Value: !Ref FrontendTargetGroup
    Export:
      Name: !Sub ${ProjectName}-${Environment}-fe-tg-arn

  ECSSecurityGroupId:
    Description: Security group ID for the ECS service
    Value: !GetAtt ECSSecurityGroup.GroupId
    Export:
      Name: !Sub ${ProjectName}-${Environment}-ecs-sg-id
