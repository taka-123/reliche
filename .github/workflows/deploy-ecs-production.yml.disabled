name: AWS ECS本番環境デプロイ

on:
  push:
    branches:
      - main
    tags:
      - "v*"

permissions:
  id-token: write # OIDC認証のため必要
  contents: read # リポジトリの内容を読み取るため必要
  packages: write # ECRへのアクセスのため必要

env:
  AWS_REGION: ap-northeast-1 # AWSリージョン
  PROJECT_NAME: laravel-nuxt-template
  ENVIRONMENT: production
  ECR_REPOSITORY_BACKEND: ${{ vars.ECR_REPOSITORY_BACKEND || 'laravel-nuxt-template-production-backend' }}
  ECR_REPOSITORY_FRONTEND: ${{ vars.ECR_REPOSITORY_FRONTEND || 'laravel-nuxt-template-production-frontend' }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER || 'laravel-nuxt-template-production' }}
  ECS_SERVICE_BACKEND: ${{ vars.ECS_SERVICE_BACKEND || 'laravel-nuxt-template-production-backend' }}
  ECS_SERVICE_FRONTEND: ${{ vars.ECS_SERVICE_FRONTEND || 'laravel-nuxt-template-production-frontend' }}
  TASK_DEFINITION_BACKEND: .aws/ecs/backend-task-definition.json
  TASK_DEFINITION_FRONTEND: .aws/ecs/frontend-task-definition.json
  BACKEND_CONTAINER_NAME: backend
  FRONTEND_CONTAINER_NAME: frontend

jobs:
  # 共通変数の設定（バージョンタグの生成）
  setup:
    name: Setup Job
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-image-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # タグの場合はタグ名を使用
            TAG=${GITHUB_REF#refs/tags/}
          else
            # ブランチの場合は短いコミットハッシュを使用
            TAG=sha-$(echo $GITHUB_SHA | cut -c1-7)
          fi
          echo "Building with tag: $TAG"
          echo "image_tag=${TAG}" >> $GITHUB_OUTPUT

  # バックエンドのテスト
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, pgsql, pdo_pgsql, bcmath, exif, gd
          coverage: none

      - name: Copy .env.example
        run: |
          cd backend
          cp .env.example .env.testing
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=pgsql/' .env.testing
          sed -i 's/DB_HOST=.*/DB_HOST=localhost/' .env.testing
          sed -i 's/DB_PORT=.*/DB_PORT=5432/' .env.testing
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=testing/' .env.testing
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=postgres/' .env.testing
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=postgres/' .env.testing

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: |
          cd backend
          composer install --prefer-dist --no-interaction --no-progress

      - name: Generate key
        run: |
          cd backend
          php artisan key:generate --env=testing

      - name: Run migrations
        run: |
          cd backend
          php artisan migrate --env=testing --force

      - name: Run PHPUnit tests
        run: |
          cd backend
          php artisan test --env=testing

      - name: Run PHPStan
        run: |
          cd backend
          vendor/bin/phpstan analyse --no-progress

  # フロントエンドのテストとビルド
  test-frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile

      - name: Run ESLint
        run: |
          cd frontend
          yarn lint

      - name: Run tests
        run: |
          cd frontend
          yarn test

  # OPAセキュリティチェック
  security-check:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Run security checks
        run: |
          # Dockerfile checks
          opa eval --format pretty --data .github/security-policies/dockerfile.rego --input frontend/Dockerfile "data.dockerfile.violations" || true
          opa eval --format pretty --data .github/security-policies/dockerfile.rego --input backend/Dockerfile.production "data.dockerfile.violations" || true

      - name: Run dependency checks
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1"
          ignore-unfixed: true

  # バックエンドのコンテナビルドとECRプッシュ
  build-backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    needs: [setup, test-backend, security-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU for multi-architecture build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ needs.setup.outputs.image_tag }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # フロントエンドのコンテナビルドとECRプッシュ
  build-frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    needs: [setup, test-frontend, security-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU for multi-architecture build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          build-args: |
            NODE_ENV=production
            BROWSER_API_BASE_URL=${{ secrets.PRODUCTION_API_URL }}
            SERVER_API_BASE_URL=${{ secrets.PRODUCTION_INTERNAL_API_URL }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ needs.setup.outputs.image_tag }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # バックエンドのECSタスク定義更新とデプロイ
  deploy-backend:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    needs: [setup, build-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update backend task definition
        id: render-backend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_BACKEND }}
          container-name: ${{ env.BACKEND_CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ needs.setup.outputs.image_tag }}
          environment-variables: |
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=5432
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            APP_KEY=${{ secrets.APP_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}

      - name: Deploy backend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-backend-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # フロントエンドのECSタスク定義更新とデプロイ
  deploy-frontend:
    name: Deploy Frontend to ECS
    runs-on: ubuntu-latest
    needs: [setup, build-frontend, deploy-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update frontend task definition
        id: render-frontend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_FRONTEND }}
          container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ needs.setup.outputs.image_tag }}
          environment-variables: |
            BROWSER_API_BASE_URL=${{ secrets.PRODUCTION_API_URL }}
            SERVER_API_BASE_URL=${{ secrets.PRODUCTION_INTERNAL_API_URL }}

      - name: Deploy frontend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # キャッシュの無効化（オプション）
  invalidate-cache:
    name: Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID != '' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  # デプロイ完了通知
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Notify success
        if: ${{ success() }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ Production deployment successful!\nImage tag: ${{ needs.setup.outputs.image_tag }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "❌ Production deployment failed!\nSee: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
